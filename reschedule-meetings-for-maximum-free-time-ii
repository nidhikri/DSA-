class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& startTime, vector<int>& endTime) {
        vector<int> ft;
        ft.push_back(startTime[0]-0);
        for(int j=1;j<startTime.size();j++){
            ft.push_back(startTime[j]-endTime[j-1]);
        }
        ft.push_back(eventTime - endTime[startTime.size()-1]);
        

        int n = ft.size();
        vector<int> maxRightFree(n, 0);
        vector<int> maxLeftFree(n, 0);
        for(int i = n-2; i >= 0; i--) {
            maxRightFree[i] = max(maxRightFree[i+1], ft[i+1]);
        }

        for(int i = 1; i < n; i++) {
            maxLeftFree[i] = max(maxLeftFree[i-1], ft[i-1]);
        }


        int result = 0;
        for(int i = 1; i < n; i++) {
            int currEventTime = endTime[i-1] - startTime[i-1]; 
            if(currEventTime <= max(maxLeftFree[i-1], maxRightFree[i])) {
                result = max(result, ft[i-1] + currEventTime + ft[i]);
            }
            result = max(result, ft[i-1] + ft[i]);
        }

        return result;
    }
};
